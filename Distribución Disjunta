clear all
close all
clc
%Vida útil bateria (min)
vu=30;
%Velocidad lineal del dron [km/h]
V=60;
%Tiempo en cambiar la bateria [min]
cb=0.5;

% Muestreo
muestra=30000
for j=1:muestra
% Obtención de puntos aleatorios
int_wp=[0 0 0];
%Matriz waypoints: X Y (KM). 1º la base
wp_min=3;
wp_max=5;
wps=floor(wp_min+rand(1)*(wp_max+1-wp_min));
% Distancia en x entre wp
distx=12/(wps-1);
XY(1,:,j)=[0 0];

for i=1:wps
    XY(i+1,1,j)=6-(i-1)*distx;

    if i==1 || i==wps
    %distancia entre wp y base
        d_min=6;
        d_max=9;
        d_base=d_min+rand(1)*(d_max+1-d_min);
        signo=-1+rand(1)*2;
        if signo<=0
            signo=-1;
        else signo=1;
        end
        XY(i+1,2,j)=signo*sqrt(d_base^2- XY(i+1,1,j)^2);
    else
        d_min=3;
        d_max=6;
        d_base=d_min+rand(1)*(d_max+1-d_min);
        signo=-1+rand(1)*2;
        if signo<=0
            signo=-1;
        else signo=1;
        end
        XY(i+1,2,j)=signo*sqrt(d_base^2- XY(i+1,1,j)^2);
    End

end

% Cálculo Matriz Tiempos de viaje
tviaje=zeros(wps+1,wps+1);
for h=1:wps+1
        for l=1:wps+1
            tviaje(h,l)=sqrt((XY(h,1,j)-XY(l,1,j))^2+(XY(h,2,j)-XY(l,2,j))^2)/V*60;
        end
end

%Cálculo de matriz de tiempos
t_paso=20; %Minutos que tardan en pasar todos los ciclistas por un punto
int_wp(1,:)=[1 15 15+t_paso];
int_wp_todos(1,:,j)=[1 15 15+t_paso];
for i=2:wps
    int_wp(i,1)=i;
    int_wp(i,2)=int_wp(i-1,3)+tviaje(i,i+1);
    int_wp(i,3)=int_wp(i,2)+t_paso;
    int_wp_todos(i,1,j)=i;
    int_wp_todos(i,2,j)=int_wp_todos(i-1,3,j)+tviaje(i,i+1);
    int_wp_todos(i,3,j)=int_wp_todos(i,2,j)+t_paso;
end

%Resultados
[tviaje,dron_g,porcentaje_g,int_wp_final_g,t_g,p_g]=gridy(XY(:,:,j),int_wp,vu,V,cb);
[dron_s,porcentaje_s,int_wp_final_s,t_s,p_s]=sweeping_mod(XY(:,:,j),int_wp,vu,V,cb);

drones(j,:)=[dron_g dron_s wps];


end

% Comparativa entre métodos
igual=0;
mejor_g=0;
mejor_s=0;
for i=1:muestra
    if drones(i,1)==drones(i,2)
        igual=igual+1;
    elseif drones(i,1)>drones(i,2)
        mejor_s=mejor_s+1;
    else
        mejor_g=mejor_g+1;
    end
end

igual=igual
mejor_g=mejor_g
mejor_s=mejor_s
porc_igual=igual/muestra*100
porc_mejor_g=mejor_g/muestra*100
porc_mejor_s=mejor_s/muestra*100
