function [tviaje,dron,porcentaje,int_wp_final,t,p]=gridy(XY,int_wp,vu,V,cb)

int_wp_final(:,:,1)=int_wp;
% Matriz tiempos entre waypoints
[z,g]=size(int_wp);
tviaje=zeros(z+1,z+1);
for h=1:z+1
        for l=1:z+1
            tviaje(h,l)=sqrt((XY(h,1)-XY(l,1))^2+(XY(h,2)-XY(l,2))^2)/V*60;
        end
end
dron=0;
% Vector con duracion de cada intervalo
[n,m]=size(int_wp);
wps=int_wp(n,1);
t_wp=zeros(1,wps);
for i=1:n
    t_wp(int_wp(i,1))=t_wp(int_wp(i,1))+int_wp(i,3)-int_wp(i,2);
end
t_wpant=t_wp;
% Bucle principal
while int_wp(1,1)~=0
    dron=dron+1;
    [n,m]=size(int_wp);
    int_wp2=[0 0 0];

    % Lanzamiento de dron
    i=1; %Marca el numero de lanzamiento desde la base
    j=1;
    h=1; %Marca la fila en la matriz int_wp
    flag=0;
    %wp=1; %WayPoint
    t(i,j,dron)=int_wp(1,2)-tviaje(1,2);
    p(i,j,dron)=0;
    t(i,j+1,dron)=int_wp(1,2);
    % Bucle

    while t(i,j,dron) < int_wp(n,3) && flag==0
    % Tiempo de lanzamiento
        if i ~= 1
            while h<=n && tant+cb+tviaje(1,int_wp(h,1)+1) > int_wp(h,3) %No da tiempo a volver al WP anterior
                h=h+1;
            end

            if h<=n
            if tant+cb+tviaje(1,int_wp(h,1)+1) > int_wp(h,2) %No da tiempo a llegar antes del inicio del intervalo
                t(i,j,dron)=tant+cb;
                t(i,j+1,dron)=tant+cb+tviaje(1,int_wp(h,1)+1);
            else
                t(i,j,dron)=int_wp(h,2)-tviaje(1,int_wp(h,1)+1);
                t(i,j+1,dron)=int_wp(h,2);
            end
            else
                flag=1;
            end
            p(i,j,dron)=0;
        end
        j=j+1;
        if flag==0
        p(i,j,dron)=int_wp(h,1);
        end

        while p(i,j,dron)~=0 && flag==0
            j=j+1;
            if (int_wp(h,3)-t(i,1,dron)+tviaje(1,int_wp(h,1)+1)) <= vu %Condición de tener batería para cubrir hasta el final
                t(i,j,dron)=int_wp(h,3);
                p(i,j,dron)=int_wp(h,1);
                j=j+1;
                %Condición de poder llegar a la siguiente base y no sea la ultima base
                if h+1<=n && (int_wp(h,3)-t(i,1,dron)+tviaje(int_wp(h,1)+1,int_wp(h+1,1)+1)+tviaje(1,int_wp(h+1,1)+1))<=vu && ... %Vida util para llegar al siguiente
                        int_wp(h+1,2)-t(i,1,dron)+tviaje(1,int_wp(h+1,1)+1) <= vu && ... % Poder cubrir el inicio del siguiente wp
                        int_wp(h,3)+tviaje(int_wp(h,1)+1,int_wp(h+1,1)+1) < int_wp(h+1,3) %Llegar antes del fin del intervalo
                    h=h+1;
                    t(i,j,dron)=int_wp(h-1,3)+tviaje(int_wp(h-1,1)+1,int_wp(h,1)+1);
                    p(i,j,dron)=int_wp(h,1);
                %Condición de poder llegar a la 3a base
                elseif h+2<=n && (int_wp(h,3)-t(i,1,dron)+tviaje(int_wp(h,1)+1,int_wp(h+2,1)+1)+tviaje(1,int_wp(h+2,1)+1))<=vu && ...
                        (int_wp(h+2,2)-t(i,1,dron)+tviaje(1,int_wp(h+2,1)+1) <= vu) && ...
                        int_wp(h,3)+tviaje(int_wp(h,1)+1,int_wp(h+2,1)+1) < int_wp(h+2,3)
                    h=h+2;
                    t(i,j,dron)=int_wp(h-2,3)+tviaje(int_wp(h-2,1)+1,int_wp(h,1)+1);
                    p(i,j,dron)=int_wp(h,1);
                else
                    t(i,j,dron)=int_wp(h,3)+tviaje(1,int_wp(h,1)+1);
                    p(i,j,dron)=0;
                end
            else
                t(i,j,dron)=t(i,1,dron)+vu-tviaje(1,int_wp(h,1)+1);
                p(i,j,dron)=int_wp(h,1);
                j=j+1;
                t(i,j,dron)=t(i,1,dron)+vu;
                p(i,j,dron)=0;
            end
        end
        if flag==0 %&& h+1<=n
        tant=t(i,j,dron);
        i=i+1;
        j=1;
        t(i,j,dron)=tant;
        end

    end



     [fp,cp]=size(p(:,:,dron));

     k=1;
     h=1;
     i=1;
     wpant=0;
     t_cubierto=zeros(z,2);
     while k<=fp
         while h<cp
             if p(k,h,dron)==0
                 h=h+1;
             else
                %t_acumulado(p(k,h,dron))=t_acumulado(p(k,h,dron))+t(k,h+1,dron)-t(k,h,dron);
                 wp=p(k,h,dron);
                 if wpant==wp
                     i=i+2;
                 else
                     i=1;
                 end
                 t_cubierto(p(k,h,dron),i)=t(k,h,dron);
                 t_cubierto(p(k,h,dron),i+1)=t(k,h+1,dron);
                 wpant=wp;
                 h=h+2;
             end
         end
         h=1;
         k=k+1;
     end



     % Se recalculan los intervalos no cubiertos en cada wp

     h=1;

     [o,r]=size(t_cubierto);
     for i=1:n
         k=1;
         cubierto=0;
         while k<=r && t_cubierto(int_wp(i,1),k)~=0
             if int_wp(i,2)>=t_cubierto(int_wp(i,1),k) && int_wp(i,3)==t_cubierto(int_wp(i,1),k+1) %Lo cubre todo
             h=h-1;
             cubierto=1;
             elseif int_wp(i,2)>=t_cubierto(int_wp(i,1),k) && int_wp(i,3)>t_cubierto(int_wp(i,1),k+1) && int_wp(i,2)<t_cubierto(int_wp(i,1),k+1) %Cubre desde el principio hasta pto intermedio
                 int_wp2(h,1)=int_wp(i,1);
                 int_wp2(h,2)=t_cubierto(int_wp(i,1),k+1);
                 int_wp2(h,3)=int_wp(i,3);
                 int_wp(i,2)=t_cubierto(int_wp(i,1),k+1);
                 int_wp(i,3)=int_wp(i,3);
                 cubierto=1;

             elseif int_wp(i,2)<t_cubierto(int_wp(i,1),k) && int_wp(i,3)==t_cubierto(int_wp(i,1),k+1) %Cubre desde pto intermedio hasta final
                 int_wp2(h,1)=int_wp(i,1);
                 int_wp2(h,2)=int_wp(i,2);
                 int_wp2(h,3)=t_cubierto(int_wp(i,1),k);
                 cubierto=1;

             elseif int_wp(i,2)<t_cubierto(int_wp(i,1),k) && int_wp(i,3)>t_cubierto(int_wp(i,1),k+1) %Cubre solo parte de en medio, sin final ni principio
                 int_wp2(h,1)=int_wp(i,1);
                 int_wp2(h,2)=int_wp(i,2);
                 int_wp2(h,3)=t_cubierto(int_wp(i,1),k);
                 h=h+1;
                 int_wp2(h,1)=int_wp(i,1);
                 int_wp2(h,2)=t_cubierto(int_wp(i,1),k+1);
                 int_wp2(h,3)=int_wp(i,3);
                 int_wp(i,2)=t_cubierto(int_wp(i,1),k+1);
                 int_wp(i,3)=int_wp(i,3);
                 cubierto=1;
                 elseif int_wp(i,3)<t_cubierto(int_wp(i,1),k) && k==1 %No cubre nada
                 int_wp2(h,1)=int_wp(i,1);
                 int_wp2(h,2)=int_wp(i,2);
                 int_wp2(h,3)=int_wp(i,3);
                 cubierto=1;
             end

             k=k+2;
         end
         if t_cubierto(int_wp(i,1),1)==0
                 int_wp2(h,1)=int_wp(i,1);
                 int_wp2(h,2)=int_wp(i,2);
                 int_wp2(h,3)=int_wp(i,3);
         end
         if cubierto==0
             int_wp2(h,1)=int_wp(i,1);
             int_wp2(h,2)=int_wp(i,2);
             int_wp2(h,3)=int_wp(i,3);
         end
         h=h+1;
     end

     int_wp=int_wp2;
     [n,m]=size(int_wp);

     for s=1:n
         for d=1:m
             int_wp_final(s,d,dron+1)=int_wp(s,d);
         end
     end

     % Calculo del porcentaje

     t_wp2=zeros(1,wps);
     if int_wp(1,1)~=0
     for i=1:n
         t_wp2(int_wp(i,1))=t_wp2(int_wp(i,1))+int_wp(i,3)-int_wp(i,2);

     end
     porcentaje(dron,:) = ((t_wpant-t_wp2)./t_wp)*100;
     else
         porcentaje(dron,:)=100;
         for i=1:dron-1
         porcentaje(dron,:) =porcentaje(dron,:)-porcentaje(i,:);
         end
     end
     t_wpant=t_wp2;

end
end
